# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyElevator.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from elevator_func import MyElevator
import win32api
import win32con
from PyQt5.QtCore import *

OPEN = 0  # 开门状态
CLOSED = 1  # 关门状态
STANDSTILL = 0  # 静止状态
RUNNING_UP = 1  # 电梯上行状态
RUNNING_DOWN = 2  # 电梯下行状态

NOPE = 0  # 空动画
READYSTART = 1  # 电梯即将运动
READYSTOP = 2  # 电梯即将停止

GOUP = 1  # 用户要上行
GODOWN = 2  # 用户要下行


class ui_MyElevator(object):

    def __init__(self):
        self.Ctrl = MyElevator(self)  # 与调度文件建立连接
        self.elevEnabled = [True] * 5  # 电梯状态(可使用/禁用)标志位
        self.doorState = [CLOSED] * 5  # 电梯门状态(开门/关门)标志位
        self.elevState = [STANDSTILL] * 5  # 电梯状态(运行向上/运行向下/静止)标志位
        self.ReadyState = [NOPE] * 5  # 待定状态(空/即将运动/即将停止)标志位

        self.Floor = [[0 for j in range(20)] for i in range(5)]  # 五个电梯的模型
        self.label = [0 for i in range(5)]  # 电梯名称的五个标签模型
        self.Floor_now = [0 for i in range(5)]  # 五个电梯的当前层数模型
        self.floor_now = [0 for i in range(5)]
        self.warning = [0 for i in range(5)]  # 五个电梯的警报器模型
        self.up = [0 for i in range(5)]  # 电梯名称的五个上升模型
        self.down = [0 for i in range(5)]  # 五个电梯的下降模型
        self.up_logo = [0 for i in range(5)]  # 电梯名称的五个上升
        self.down_logo = [0 for i in range(5)]  # 五个电梯的下降
        self.open = [0 for i in range(5)]  # 五个电梯的开门模型
        self.close = [0 for i in range(5)]  # 五个电梯的关门模型
        self.line = [0 for i in range(6)]  # 6条分割线模型
        self.door = [0 for i in range(6)]  # 6条门模型

        self.Floor_now_ex = [0 for i in range(20)]  # 右侧按钮区域
        self.up_ex = [0 for i in range(20)]
        self.down_ex = [0 for i in range(20)]

        self.outMessage = [0 for i in range(20)]  # 记录每层上下行键的模型

        self.up_total = None
        self.down_total = None
        self.Floor_now_total = None

    def setupUi(self, MyElevator_UI):
        MyElevator_UI.setObjectName("MyElevator_UI")
        MyElevator_UI.resize(1600, 1000)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MyElevator_UI.sizePolicy().hasHeightForWidth())
        MyElevator_UI.setSizePolicy(sizePolicy)
        MyElevator_UI.setMinimumSize(QtCore.QSize(2100, 1000))
        MyElevator_UI.setMaximumSize(QtCore.QSize(2100, 1000))
        MyElevator_UI.setSizeIncrement(QtCore.QSize(10, 10))
        MyElevator_UI.setBaseSize(QtCore.QSize(10, 10))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setKerning(True)
        MyElevator_UI.setFont(font)
        MyElevator_UI.setStyleSheet("")

        self.centralwidget = QtWidgets.QWidget(MyElevator_UI)
        self.centralwidget.setObjectName("centralwidget")
        # 总的标签“电梯调度”
        self.label_total = QtWidgets.QLabel(self.centralwidget)
        self.label_total.setGeometry(QtCore.QRect(650, 110, 200, 50))
        self.label_total.setMinimumSize(QtCore.QSize(200, 50))
        self.label_total.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_total.setFont(font)
        self.label_total.setAlignment(QtCore.Qt.AlignCenter)
        self.label_total.setObjectName("label_total")
        self.label_total_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_total_2.setGeometry(QtCore.QRect(1580, 790, 200, 50))
        self.label_total_2.setMinimumSize(QtCore.QSize(400, 50))
        self.label_total_2.setMaximumSize(QtCore.QSize(400, 50))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_total_2.setFont(font)
        self.label_total_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_total_2.setObjectName("label_total_2")
        # 额外标签“当前楼层”
        self.label_ex = QtWidgets.QLabel(self.centralwidget)
        self.label_ex.setGeometry(QtCore.QRect(530, 180, 200, 50))
        self.label_ex.setMinimumSize(QtCore.QSize(200, 50))
        self.label_ex.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_ex.setFont(font)
        self.label_ex.setObjectName("label_ex")
        # 当前层数选择框
        self.Floor_now_total = QtWidgets.QComboBox(self.centralwidget)
        self.Floor_now_total.setGeometry(QtCore.QRect(730, 180, 80, 40))
        self.Floor_now_total.setMinimumSize(QtCore.QSize(80, 40))
        self.Floor_now_total.setMaximumSize(QtCore.QSize(80, 40))
        self.Floor_now_total.setObjectName("Floor_now_total")
        for i in range(1, 21):
            self.Floor_now_total.addItem(str(i))  # 加入楼层信息
        # 总的下降键
        self.down_total = QtWidgets.QPushButton(self.centralwidget)
        self.down_total.setGeometry(QtCore.QRect(910, 180, 80, 40))
        self.down_total.setMinimumSize(QtCore.QSize(80, 40))
        self.down_total.setMaximumSize(QtCore.QSize(80, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.down_total.setFont(font)
        self.down_total.setStyleSheet("QPushButton{border-image:url(image/down.png)}"
                                      "QPushButton:pressed{border-image: url(image/down_work.png)}"
                                      )
        self.down_total.setText("")
        self.down_total.setObjectName("down_0")
        self.down_total.clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数
        # 总的上升键
        self.up_total = QtWidgets.QPushButton(self.centralwidget)
        self.up_total.setGeometry(QtCore.QRect(830, 180, 80, 40))
        self.up_total.setMinimumSize(QtCore.QSize(80, 40))
        self.up_total.setMaximumSize(QtCore.QSize(80, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.up_total.setFont(font)
        self.up_total.setStyleSheet("QPushButton{border-image: url(image/up.png)}"
                                    "QPushButton:pressed{border-image: url(image/up_work.png)}"
                                    )
        self.up_total.setText("")
        self.up_total.setObjectName("up_0")
        self.up_total.clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数

        # 五个电梯初始楼层置为1
        for i in range(0, 5):
            self.floor_now[i] = 1
        # 五个电梯标签
        for i in range(1, 6):
            self.label[i - 1] = QtWidgets.QLabel(self.centralwidget)
            self.label[i - 1].setGeometry(QtCore.QRect(100 + 280 * (i - 1), 810, 80, 40))
            self.label[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.label[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.label[i - 1].setFont(font)
            self.label[i - 1].setObjectName("label_" + str(i))
        # 五个门标签
        for i in range(1, 6):
            self.door[i - 1] = QtWidgets.QLabel(self.centralwidget)
            self.door[i - 1].setGeometry(QtCore.QRect(100 + 280 * (i - 1), 760, 80, 40))
            self.door[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.door[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.door[i - 1].setFont(font)
            self.door[i - 1].setStyleSheet("border-image:url(image/door_close.png)")
            self.door[i - 1].setObjectName("door_" + str(i))

        # 五个电梯的警告
        for i in range(1, 6):
            self.warning[i - 1] = QtWidgets.QPushButton(self.centralwidget)
            self.warning[i - 1].setGeometry(QtCore.QRect(230 + 280 * (i - 1), 810, 80, 60))
            self.warning[i - 1].setMinimumSize(QtCore.QSize(80, 60))
            self.warning[i - 1].setMaximumSize(QtCore.QSize(80, 60))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.warning[i - 1].setFont(font)
            self.warning[i - 1].setStyleSheet("border-image:url(image/warning.png)")
            self.warning[i - 1].setText("")
            self.warning[i - 1].setObjectName("warning_" + str(i))
            self.warning[i - 1].clicked.connect(MyElevator_UI.warningClick)  # 绑定报警器函数
        # 五个电梯的当前层数
        for i in range(1, 6):
            self.Floor_now[i - 1] = QtWidgets.QLCDNumber(self.centralwidget)
            self.Floor_now[i - 1].setGeometry(QtCore.QRect(100 + 280 * (i - 1), 710, 80, 40))
            self.Floor_now[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.Floor_now[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            self.Floor_now[i - 1].setDigitCount(2)
            self.Floor_now[i - 1].setProperty("value", 1.0)  # 设置初始楼层为1层
            self.Floor_now[i - 1].setObjectName("Floor_now_" + str(i))
        # 五个电梯的向上键
        for i in range(1, 6):
            self.up[i - 1] = QtWidgets.QPushButton(self.centralwidget)
            self.up[i - 1].setGeometry(QtCore.QRect(100 + 280 * (i - 1), 610, 80, 40))
            self.up[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.up[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(25)
            self.up[i - 1].setFont(font)
            self.up[i - 1].setStyleSheet("QPushButton{border-image: url(image/up.png)}"
                                         "QPushButton:pressed{border-image: url(image/up_work.png)}")
            self.up[i - 1].setObjectName("up_" + str(i))
            # self.up_total.clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数
            self.up[i - 1].clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数
        # 五个电梯的向下键
        for i in range(1, 6):
            self.down[i - 1] = QtWidgets.QPushButton(self.centralwidget)
            self.down[i - 1].setGeometry(QtCore.QRect(100 + 280 * (i - 1), 660, 80, 40))
            self.down[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.down[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(25)
            self.down[i - 1].setFont(font)
            self.down[i - 1].setStyleSheet("QPushButton{border-image: url(image/down.png)}"
                                           "QPushButton:pressed{border-image: url(image/down_work.png)}")
            self.down[i - 1].setObjectName("down_" + str(i))
            # self.down_total.clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数
            self.down[i - 1].clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数
        # 五个电梯的向上标志
        for i in range(1, 6):
            self.up_logo[i - 1] = QtWidgets.QGraphicsView(self.centralwidget)
            self.up_logo[i - 1].setGeometry(QtCore.QRect(100 + 280 * (i - 1), 410, 80, 40))
            self.up_logo[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.up_logo[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(25)
            self.up_logo[i - 1].setFont(font)
            self.up_logo[i - 1].setStyleSheet("border-image:url(image/upEle.png)")
            self.up_logo[i - 1].setObjectName("up_" + str(i))
        # 五个电梯的向下标志
        for i in range(1, 6):
            self.down_logo[i - 1] = QtWidgets.QGraphicsView(self.centralwidget)
            self.down_logo[i - 1].setGeometry(QtCore.QRect(100 + 280 * (i - 1), 460, 80, 40))
            self.down_logo[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.down_logo[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(25)
            self.down_logo[i - 1].setFont(font)
            self.down_logo[i - 1].setStyleSheet("border-image:url(image/downEle.png)")
            self.down_logo[i - 1].setObjectName("down_" + str(i))
        # 五个电梯的开门键
        for i in range(1, 6):
            self.open[i - 1] = QtWidgets.QPushButton(self.centralwidget)
            self.open[i - 1].setGeometry(QtCore.QRect(190 + 280 * (i - 1), 760, 80, 40))
            self.open[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.open[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.open[i - 1].setFont(font)
            self.open[i - 1].setStyleSheet("QPushButton{border-image:url(image/open.png)}"
                                           "QPushButton: pressed{url(image/open_work.png)}"
                                           )
            self.open[i - 1].setObjectName("open_" + str(i))
            self.open[i - 1].clicked.connect(MyElevator_UI.doorClick)  # 绑定门开关键槽函数
        # 五个电梯的关门键
        for i in range(1, 6):
            self.close[i - 1] = QtWidgets.QPushButton(self.centralwidget)
            self.close[i - 1].setGeometry(QtCore.QRect(280 + 280 * (i - 1), 760, 80, 40))
            self.close[i - 1].setMinimumSize(QtCore.QSize(80, 40))
            self.close[i - 1].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.close[i - 1].setFont(font)
            self.close[i - 1].setStyleSheet("QPushButton{border-image:url(image/close.png)}"
                                            "QPushButton: pressed{url(image/close_work.png)}"
                                            )
            self.close[i - 1].setObjectName("close_" + str(i))
            self.close[i - 1].clicked.connect(MyElevator_UI.doorClick)  # 绑定门开关键槽函数
        # 五个电梯楼层
        for j in range(1, 6):
            for i in range(1, 21):
                self.Floor[j - 1][i - 1] = QtWidgets.QPushButton(self.centralwidget)
                if i % 2 == 1:
                    self.Floor[j - 1][i - 1].setGeometry(
                        QtCore.QRect(190 + 280 * (j - 1), 710 - (i - 1) // 2 * 50, 80, 40))
                elif i % 2 == 0:
                    self.Floor[j - 1][i - 1].setGeometry(
                        QtCore.QRect(280 + 280 * (j - 1), 710 - (i - 1) // 2 * 50, 80, 40))
                self.Floor[j - 1][i - 1].setMinimumSize(QtCore.QSize(80, 40))
                self.Floor[j - 1][i - 1].setMaximumSize(QtCore.QSize(80, 40))
                font = QtGui.QFont()
                font.setPointSize(15)
                self.Floor[j - 1][i - 1].setFont(font)
                self.Floor[j - 1][i - 1].setStyleSheet("background-color: white;\n"
                                                       "border-style: outset;\n"
                                                       "border-width: 2px;\n"
                                                       "border-radius: 15px;\n"
                                                       "border-color: black;\n"
                                                       "padding: 4px;\n"
                                                       "")
                self.Floor[j - 1][i - 1].setObjectName("Floor_" + str(j) + "_" + str(i))
                self.Floor[j - 1][i - 1].clicked.connect(MyElevator_UI.floorClick)  # 绑定楼层按键槽函数
        # 8个line的模型
        for i in range(0, 6):
            self.line[i] = QtWidgets.QFrame(self.centralwidget)
            self.line[i].setGeometry(QtCore.QRect(90 + 280 * i, 250, 5, 631))
            self.line[i].setMinimumSize(QtCore.QSize(5, 0))
            self.line[i].setMaximumSize(QtCore.QSize(5, 16777215))
            self.line[i].setStyleSheet("border:none;\n" "background:black;")
            self.line[i].setFrameShape(QtWidgets.QFrame.VLine)
            self.line[i].setFrameShadow(QtWidgets.QFrame.Sunken)
            self.line[i].setObjectName("line" + str(i))
        # 右侧按键区域
        for i in range(0, 20):
            self.Floor_now_ex[i] = QtWidgets.QLCDNumber(self.centralwidget)
            if i % 2 == 1:
                self.Floor_now_ex[i].setGeometry(QtCore.QRect(1810, 710 - (i - 1) // 2 * 50, 80, 40))
            elif i % 2 == 0:
                self.Floor_now_ex[i].setGeometry(QtCore.QRect(1530, 710 - i // 2 * 50, 80, 40))
            self.Floor_now_ex[i].setProperty("value", str(i + 1.0))
            self.Floor_now_ex[i].setMinimumSize(QtCore.QSize(80, 40))
            self.Floor_now_ex[i].setMaximumSize(QtCore.QSize(80, 40))
            self.Floor_now_ex[i].setObjectName("Floor_now_ex_" + str(i + 1))

            self.down_ex[i] = QtWidgets.QPushButton(self.centralwidget)
            if i % 2 == 1:
                self.down_ex[i].setGeometry(QtCore.QRect(1970, 710 - (i - 1) // 2 * 50, 80, 40))
            elif i % 2 == 0:
                self.down_ex[i].setGeometry(QtCore.QRect(1690, 710 - i // 2 * 50, 80, 40))
            self.down_ex[i].setMinimumSize(QtCore.QSize(80, 40))
            self.down_ex[i].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(20)
            self.down_ex[i].setFont(font)
            self.down_ex[i].setStyleSheet("border-image:url(image/down.png)")
            self.down_ex[i].setText("")
            self.down_ex[i].setObjectName("down_ex_" + str(i + 1))
            self.down_ex[i].clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数

            self.up_ex[i] = QtWidgets.QPushButton(self.centralwidget)
            if i % 2 == 1:
                self.up_ex[i].setGeometry(QtCore.QRect(1890, 710 - (i - 1) // 2 * 50, 80, 40))
            elif i % 2 == 0:
                self.up_ex[i].setGeometry(QtCore.QRect(1610, 710 - i // 2 * 50, 80, 40))

            self.up_ex[i].setMinimumSize(QtCore.QSize(80, 40))
            self.up_ex[i].setMaximumSize(QtCore.QSize(80, 40))
            font = QtGui.QFont()
            font.setPointSize(20)
            self.up_ex[i].setFont(font)
            self.up_ex[i].setStyleSheet("border-image:url(image/up.png)")
            self.up_ex[i].setText("")
            self.up_ex[i].setObjectName("up_ex_" + str(i + 1))
            self.up_ex[i].clicked.connect(MyElevator_UI.updownClick)  # 绑定上下选择函数

        self.line7 = QtWidgets.QFrame(self.centralwidget)
        self.line7.setGeometry(QtCore.QRect(90, 880, 1981, 5))
        self.line7.setMinimumSize(QtCore.QSize(0, 5))
        self.line7.setMaximumSize(QtCore.QSize(16777215, 5))
        self.line7.setStyleSheet("border:none;\n"
                                 "background:black;")
        self.line7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line7.setObjectName("line7")
        self.line8 = QtWidgets.QFrame(self.centralwidget)
        self.line8.setGeometry(QtCore.QRect(90, 250, 1981, 5))
        self.line8.setMinimumSize(QtCore.QSize(0, 5))
        self.line8.setMaximumSize(QtCore.QSize(16777215, 5))
        self.line8.setStyleSheet("border:none;\n"
                                 "background:black;")
        self.line8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line8.setObjectName("line8")
        self.line9 = QtWidgets.QFrame(self.centralwidget)
        self.line9.setGeometry(QtCore.QRect(2070, 250, 5, 631))
        self.line9.setMinimumSize(QtCore.QSize(5, 0))
        self.line9.setMaximumSize(QtCore.QSize(5, 16777215))
        self.line9.setStyleSheet("border:none;\n"
                                 "background:black;")
        self.line9.setFrameShape(QtWidgets.QFrame.VLine)
        self.line9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line9.setObjectName("line9")

        # raise所有组块
        self.label_ex.raise_()
        self.label_total.raise_()
        self.label_total_2.raise_()
        self.Floor_now_total.raise_()
        self.down_total.raise_()
        self.up_total.raise_()
        for j in range(1, 6):
            for i in range(1, 21):
                self.Floor[j - 1][i - 1].raise_()
        for i in range(1, 6):
            self.warning[i - 1].raise_()
            self.Floor_now[i - 1].raise_()
            self.up[i - 1].raise_()
            self.down_logo[i - 1].raise_()
            self.up_logo[i - 1].raise_()
            self.down[i - 1].raise_()
            self.open[i - 1].raise_()
            self.close[i - 1].raise_()
            self.label[i - 1].raise_()
            self.door[i - 1].raise_()
        for i in range(0, 20):
            self.Floor_now_ex[i].raise_()
            self.up_ex[i].raise_()
            self.down_ex[i].raise_()
        for i in range(0, 6):
            self.line[i].raise_()
        self.line7.raise_()
        self.line8.raise_()
        self.line9.raise_()

        MyElevator_UI.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MyElevator_UI)
        self.statusbar.setObjectName("statusbar")
        MyElevator_UI.setStatusBar(self.statusbar)

        self.retranslateUi(MyElevator_UI)
        QtCore.QMetaObject.connectSlotsByName(MyElevator_UI)

    # 初始化填入按钮字符
    def retranslateUi(self, MyElevator_UI):
        _translate = QtCore.QCoreApplication.translate
        MyElevator_UI.setWindowTitle(_translate("MyElevator_UI", "MainWindow"))
        self.label_total.setText(_translate("MyElevator_UI", "电梯调度"))
        self.label_ex.setText(_translate("MyElevator_UI", "当前楼层："))
        for i in range(1, 6):
            self.label[i - 1].setText(_translate("MyElevator_UI", "电梯" + str(i)))
        for j in range(1, 6):
            for i in range(1, 21):
                self.Floor[j - 1][i - 1].setText(_translate("MyElevator_UI", str(i)))
        self.label_total_2.setText(_translate("MyElevator_UI", "每层的上下按钮"))

    # 报警器
    def warningClick(self):
        which_btn = int(self.sender().objectName()[-1]) - 1
        print("点击了{0}号报警器".format(which_btn))
        self.warning[which_btn].setStyleSheet("border-image:url(image/warning_work.png)")
        self.Ctrl.warnCtrl(which_btn)  # 调用控制器进行warnCtrl处理

    # 楼层按键
    def floorClick(self):
        which_btn = self.sender()
        btn_name = which_btn.objectName()
        buf = [int(s) for s in btn_name if s.isdigit()]  # 提取字符串中的数字
        which_elev = buf[0]
        which_floor = buf[1]
        if len(buf) > 2:
            which_floor = which_floor * 10 + buf[2]
        print("{0}号电梯, 第{1}层按键被按，若不是当前楼层，则加入消息列表".format(which_elev, which_floor))
        which_btn.setStyleSheet(
            "border-style: outset;\n"
            "border-width: 2px;\n"
            "border-radius: 15px;\n"
            "border-color: black;\n"
            "padding: 4px;\n"
            "background-color: orange\n"
        )
        which_btn.setEnabled(False)  # 将该按钮设置为不可点击状态
        self.Ctrl.innerCtrl(which_elev - 1, which_floor)  # 调用控制器进行innerCtrl处理

    # 开关门
    def doorClick(self):
        door_name = self.sender().objectName()
        which_elev = int(door_name[-1])
        which_command = 0 if door_name[0] == 'o' else 1  # 0 => 开门    1 => 关门
        print("{0}号电梯, 命令是{1}（0为开门，1为关门）".format(which_elev + 1, which_command))

        self.Ctrl.doorCtrl(which_elev - 1, which_command)  # 调用控制器进行doorCtrl处理

    # 上下键选择
    def updownClick(self):
        which_floor = int(self.Floor_now_total.currentText())

        which_btn = self.sender().objectName()
        flag = 1
        if which_btn[0] == 'd':
            if which_btn[5] == 'e':
                flag = 0
                temp = int(which_btn[8])
                if len(which_btn) > 9:
                    temp = temp * 10 + int(which_btn[9])
                which_floor = int(self.Floor_now_ex[temp - 1].value())
        else:
            if which_btn[3] == 'e':
                flag = 0
                temp = int(which_btn[6])
                if len(which_btn) > 7:
                    temp = temp * 10 + int(which_btn[7])
                which_floor = int(self.Floor_now_ex[temp - 1].value())

        if which_btn[0] == 'd':
            choice = GODOWN
            self.down_ex[which_floor - 1].setStyleSheet(
                "QPushButton{border-image: url(image/down_work.png)}")
            self.down_ex[which_floor - 1].setEnabled(False)
            if flag:
                for i in range(0, 5):
                    if self.elevEnabled[i]:
                        self.down[i].setStyleSheet(
                            "QPushButton{border-image: url(image/down_work.png)}")
                        self.down[i].setEnabled(False)
        else:
            choice = GOUP
            self.up_ex[which_floor - 1].setStyleSheet(
                "QPushButton{border-image: url(image/up_work.png)}")
            self.up_ex[which_floor - 1].setEnabled(False)
            if flag:
                for i in range(0, 5):
                    if self.elevEnabled[i]:
                        self.up[i].setStyleSheet(
                            "QPushButton{border-image: url(image/up_work.png)}")
                        self.up[i].setEnabled(False)
        print("用户在第{0}层按下了{1}键（1为上升，2为下降）".format(which_floor, choice))
        self.Ctrl.outerCtrl(which_floor, choice)  # 调用控制器进行outerCtrl处理
